/**
@mainpage Dokumentacja zadania gamma

### Treść zadania

Tegoroczne duże zadanie polega na zaimplementowaniu gry gamma.<br>

Grę rozgrywa się na prostokątnej planszy, która składa się z jednakowych
kwadratowych pól. Pola sąsiadujące na planszy to takie, które stykają się bokami.
Pól stykających się tylko rogami nie uważamy za sąsiadujące. Pola tworzą obszar,
jeśli z każdego z nich można dojść do innego, przechodząc jedynie przez pola
sąsiadujące. Pojedyncze pole też jest obszarem. Grać może jedna lub więcej osób.
Na początku gry plansza jest pusta. Gracze kolejno zajmują po jednym polu,
stawiając na nim swój pionek. Gracz może zająć dowolne niezajęte pole, 
przestrzegając jedynie zasady, że zbiór pól zajętych przez tego samego gracza
nie może w żadnej fazie gry składać się z więcej niż, będącej parametrem gry,
maksymalnej liczby obszarów. Każdy gracz jeden raz w całej rozgrywce może wykonać
złoty ruch, który polega na zabraniu z planszy pionka innego gracza i postawieniu
w jego miejsce swojego pionka, ale ten ruch nadal nie może naruszać zasady
maksymalnej liczby zajętych obszarów przez żadnego z graczy. Gracz, który nie
jest w stanie wykonać ruchu zgodnego z powyższą zasadą, wypada z gry, ale może
wrócić do gry po jakimś złotym ruchu innego gracza. Gra kończy się, gdy już żaden
gracz nie może wykonać ruchu. Wygrywa gracz, który zajmie największą liczbę pól.

Jako pierwszą część zadania należy zaimplementować moduł „silnika” gry.
Opis interfejsu modułu znajduje się w pliku @ref src/gamma.h.

Jako drugą część dużego zadania należy zaimplementować program, który,
korzystając z modułu silnika zaimplementowanego w części pierwszej, umożliwia
przeprowadzanie rozgrywki.

Celem trzeciej części zadania jest dokończenie projektu gry gamma.
Należy poprawić działanie funkcji @ref gamma_golden_possible, aby dawała wynik
<code>true</code> wtedy i tylko wtedy, gdy gracz o numerze <code>player</code>
może wykonać złoty ruch. Należy uatrakcyjnić wygląd planszy w trybie interaktywnym.

### Opis programu

Interfejs programu jest tekstowy.
Program czyta dane ze standardowego wejścia, wyniki wypisuje na standardowe
wyjście, a informacje o błędach na standardowe wyjście diagnostyczne.
Program działa w dwóch trybach.<br>

<b>Tryb wsadowy (ang. <em>batch mode</em>)</b>

W trybie wsadowym program oczekuje poleceń, każde w osobnym wierszu.
Rodzaj polecenia jest determinowany pierwszym znakiem wiersza.
Jeśli polecenie wymaga podania parametru lub parametrów, to po tym znaku
występuje odstęp składający się z co najmniej jednego białego znaku, a po tym
odstępie pojawiają się kolejne parametry.
Parametry polecenia są liczbami dziesiętnymi.
Pomiędzy parametrami występuje odstęp składający się z co najmniej jednego
białego znaku.
Na końcu wiersza może wystąpić dowolna liczba białych znaków.<br>

Na początku działania program oczekuje jednego z dwóch poleceń:<br>

<ul>
<li><code>B width height players areas</code></li>
<li><code>I width height players areas</code></li>
</ul>

Polecenia te służą do utworzenia nowej gry za pomocą wywołania funkcji
@ref gamma_new.
Poprawne wykonanie polecenia <code>B</code> jest kwitowane wypisaniem na
standardowe wyjście komunikatu <code>OK line</code> gdzie <code>line</code> jest 
numerem wiersza, w którym pojawiło się to polecenie.
Po czym program akceptuje polecenia:<br>

<ul>
<li><code>m player x y</code> – wywołuje funkcję @ref gamma_move,</li>
<li><code>g player x y</code> – wywołuje funkcję @ref gamma_golden_move,</li>
<li><code>b player</code> – wywołuje funkcję @ref gamma_busy_fields,</li>
<li><code>f player</code> – wywołuje funkcję @ref gamma_free_fields,</li>
<li><code>q player</code> – wywołuje funkcję @ref gamma_golden_possible,</li>
<li><code>p</code> – wywołuje funkcję @ref gamma_board.</li>
</ul>

Program wypisuje wynik każdej z tych funkcji na standardowe wyjście.
Wartość <code>false</code> wypisuje jako <code>0</code>, a wartość
<code>true</code> jako <code>1</code>.<br>

Program nie interpretuje pustych wierszy (składających się tylko ze znaku przejścia
do nowego wiersza) oraz wierszy zaczynających się znakiem <code>#</code>.<br>

Program kwituje każdy błędny wiersz (niepasujący do powyższego opisu) wypisaniem
na standardowe wyjście diagnostyczne komunikatu <code>ERROR line</code> gdzie
<code>line</code> jest numerem błędnego wiersza.<br>

Wiersze na wejściu liczone są od jedynki.
Liczone są wszystkie wiersze, łącznie z tymi, które nie są interpretowane.<br>

W trybie wsadowym program kończy działanie, gdy skończą się dane na wejściu.<br>

Poprawne wykonanie polecenia <code>I</code> powoduje przejście do trybu
interaktywnego.<br>

<b>Tryb interaktywny (ang. <em>interactive mode</em>)</b>

W trybie interaktywnym program wyświetla planszę, a pod planszą wiersz
zachęcający gracza do wykonania ruchu.
Program prosi o wykonanie ruchu kolejnych graczy, przy czym pomija graczy,
dla których funkcja @ref gamma_free_fields zwróciła <code>0</code> i funkcja
@ref gamma_golden_possible zwróciła <code>false</code>.
Ruch wykonuje się, przesuwając kursor na wybrane pole za pomocą klawiszy ze
strzałkami, a następnie wciskając klawisz <code>spacja</code>, aby wykonać
zwykły ruch, lub klawisz <code>G</code>, aby wykonać złoty ruch.
Gracz może zrezygnować z ruchu, wciskając klawisz <code>C</code>.
Wciśnięcie klawiszy literowych powinno być rozpoznawane niezależnie od
wciśnięcie klawisza <code>Shift</code> i stanu <code>CapsLock</code>.<br>

Gra kończy się, gdy już żaden gracz nie może wykonać ruchu lub po jednokrotnym
wciśnięciu kombinacji klawiszy <code>Ctrl-D</code>.
Wtedy program wypisuje ostateczną planszę gry wraz z podsumowaniem, ile pól
zajął każdy z graczy.<br>

W trybie interaktywnym program uniemożliwia użytkownikom wykonywanie
błędnych akcji.<br>

<b>Kończenie programu</b>

Zasadniczo program kończy się kodem 0, chyba że wystąpił jakiś
krytyczny błąd – wtedy program powinien zakończyć się kodem 1.
Przed zakończeniem działania pogram zwalnia całą zaalokowaną
pamięć, w szczególności wywołuje funkcję @ref gamma_delete.<br>

*/
